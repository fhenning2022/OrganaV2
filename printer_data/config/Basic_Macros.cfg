#####################################################################
# 	Macro
#####################################################################
#
#   This section contains basic macros that needed in several other
#   files. Getting them all to a single place should help to only
#   use what needed without hunting down several other files.
#
#####################################################################
##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

## Reset SD File after Print_END or CANCEL_PRINT
## This will avoid the reprint option in Mainsail after a print is done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro DIRECT_MOVE]
gcode:
  {% set out_param = ["G0"] %}
  {% set _dummy = out_param.append("X%s" % params.X) if params.X %}
  {% set _dummy = out_param.append("Y%s" % params.Y) if params.Y %}
  {% set _dummy = out_param.append("Z%s" % params.Z) if params.Z %}
  {% set _dummy = out_param.append("E%s" % params.E) if params.E %}
  {% set _dummy = out_param.append("F%s" % params.F) if params.F %}
  {out_param|join(" ")}

##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set out = ['mcu build version:'] %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% if name2 is in ['mcu_version'] %}
        {% set _dummy = out.append("%s: %s" % (name1, printer[name1][name2])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(out|join("\n"))}
  M115.1


## Load & Unload Distance wil be determined by the diatance from extruder to the nozzle
[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro CALC_BED_MESH]
#    Calculate bed_mesh settings based on probe offsets and bed size, and write an updated
#    [bed_mesh] config file including mesh bounds, probe_count, algorithm, horizontal_move_z,
#   speed, fade_start, fade_end, and fade_target.
# Usage:
#   CALC_BED_MESH BED_X=<value> BED_Y=<value> PROBE_X=<value> PROBE_Y=<value>
#                   [FILE=<path>] [PROBE_COUNT=<x,y>]
#                   [ALGORITHM=<name>] [HORIZONTAL_MOVE_Z=<value>]
#                   [SPEED=<value>] [FADE_START=<value>]
#                   [FADE_END=<value>] [FADE_TARGET=<value>]
gcode:
    {% set BED_X = params.BED_X|default(220)|float %}
    {% set BED_Y = params.BED_Y|default(220)|float %}
    {% set PROBE_X = params.PROBE_X|default(0)|float %}
    {% set PROBE_Y = params.PROBE_Y|default(0)|float %}
    {% set FILE = params.FILE|default("bed_mesh.cfg") %}

    {# Set additional bed_mesh parameters with defaults as suggested by Klipper docs #}
    {% set PROBE_COUNT = params.PROBE_COUNT|default("3,3") %}
    {% set ALGORITHM = params.ALGORITHM|default("bicubic") %}
    {% set HORIZONTAL_MOVE_Z = params.HORIZONTAL_MOVE_Z|default(5)|float %}
    {% set SPEED = params.SPEED|default(200)|float %}
    {% set FADE_START = params.FADE_START|default(2)|float %}
    {% set FADE_END = params.FADE_END|default(6)|float %}
    {% set FADE_TARGET = params.FADE_TARGET|default(0)|float %}

    {# Calculate mesh bounds based on probe offsets and bed dimensions. Adjust the math if needed. #}
    {% set MESH_MIN_X = [0, PROBE_X]|max %}
    {% set MESH_MAX_X = [BED_X, BED_X + PROBE_X]|min %}
    {% set MESH_MIN_Y = [0, PROBE_Y]|max %}
    {% set MESH_MAX_Y = [BED_Y, BED_Y + PROBE_Y]|min %}

    {% if MESH_MIN_X >= MESH_MAX_X or MESH_MIN_Y >= MESH_MAX_Y %}
        RESPOND TYPE=error MSG="Invalid mesh area! Check probe offsets (PROBE_X=%.1f, PROBE_Y=%.1f) and bed size (X=%.1f, Y=%.1f)." % (PROBE_X, PROBE_Y, BED_X, BED_Y)
    {% else %}
        RESPOND TYPE=command MSG="Calculated bed_mesh_min: (%.1f, %.1f)" % (MESH_MIN_X, MESH_MIN_Y)
        RESPOND TYPE=command MSG="Calculated bed_mesh_max: (%.1f, %.1f)" % (MESH_MAX_X, MESH_MAX_Y)
        RESPOND TYPE=command MSG="Updating [bed_mesh] config file: " + FILE

        {# Build the configuration text #}
        {% set config_text = "[bed_mesh]\n" %}
        {% set config_text = config_text ~ "mesh_min: %.1f, %.1f\n"|format(MESH_MIN_X, MESH_MIN_Y) %}
        {% set config_text = config_text ~ "mesh_max: %.1f, %.1f\n"|format(MESH_MAX_X, MESH_MAX_Y) %}
        {% set config_text = config_text ~ "probe_count: " ~ PROBE_COUNT ~ "\n" %}
        {% set config_text = config_text ~ "algorithm: " ~ ALGORITHM ~ "\n" %}
        {% set config_text = config_text ~ "horizontal_move_z: %.1f\n"|format(HORIZONTAL_MOVE_Z) %}
        {% set config_text = config_text ~ "speed: %.1f\n"|format(SPEED) %}
        {% set config_text = config_text ~ "fade_start: %.1f\n"|format(FADE_START) %}
        {% set config_text = config_text ~ "fade_end: %.1f\n"|format(FADE_END) %}
        {% set config_text = config_text ~ "fade_target: %.1f" |format(FADE_TARGET) %}

        {# Write the configuration to the file using a shell command #}
        RUN_SHELL_COMMAND CMD="echo -e '{{ config_text }}' > {{ FILE }}"
    {% endif %}
    